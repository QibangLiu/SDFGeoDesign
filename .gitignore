**/slurm_output/
**/saved_models/
**/__pycache__/
**/.ipynb_checkpoints/
**/.vscode/
**/dataset/
__pycache__/
torch_utils/


averaged_mises_allframes = []
for ith in range(1, 5):
    frame = step.frames[ith]
    stress_field = frame.fieldOutputs['S']
    mises_field = stress_field.getScalarField(
        invariant=MISES)  # Von Mises stress
    element_nodal_mises = mises_field.getSubset(position=ELEMENT_NODAL)
    # Use defaultdict for efficient accumulation
    mises_sum = defaultdict(float)  # Sum of von Mises stress for each node
    count = defaultdict(int)        # Count of contributions for each node
    # Accumulate von Mises stress and counts
    for value in element_nodal_mises.values:
        node_label = value.nodeLabel
        mises_sum[node_label] += value.data  # Add the von Mises stress
        count[node_label] += 1               # Increment the contribution count
    # Compute averaged von Mises stresses
    sorted_node_labels = sorted(mises_sum.keys())
    averaged_mises_frame = np.array(
        [mises_sum[node_label] / count[node_label] for node_label in sorted_node_labels])
    averaged_mises_allframes.append(averaged_mises_frame)

averaged_mises_allframes = np.array(averaged_mises_allframes)
